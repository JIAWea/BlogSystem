# Generated by Django 2.1.4 on 2019-01-04 10:31

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32)),
                ('summary', models.CharField(max_length=100)),
                ('detail', models.CharField(max_length=500)),
                ('ctime', models.DateTimeField()),
                ('article_type_id', models.IntegerField(choices=[(1, 'Python'), (2, 'Linux'), (3, 'GO'), (4, 'PHP')], default=None)),
            ],
        ),
        migrations.CreateModel(
            name='Article2Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Article')),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('bid', models.AutoField(primary_key=True, serialize=False)),
                ('surfix', models.CharField(max_length=32)),
                ('theme', models.CharField(max_length=32)),
                ('title', models.CharField(max_length=32)),
                ('summary', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name_plural': '博客表',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=32)),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Blog')),
            ],
            options={
                'verbose_name_plural': '分类表',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=32)),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Blog')),
            ],
            options={
                'verbose_name_plural': '标签表',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=32)),
                ('pwd', models.CharField(max_length=32)),
                ('email', models.EmailField(max_length=32)),
                ('img', models.ImageField(upload_to='')),
            ],
            options={
                'verbose_name_plural': '用户表',
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='uid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.UserInfo'),
        ),
        migrations.AddField(
            model_name='article2tag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Tag'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Category', verbose_name='文章类型'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(through='repository.Article2Tag', to='repository.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='blog',
            unique_together={('bid', 'uid')},
        ),
    ]
